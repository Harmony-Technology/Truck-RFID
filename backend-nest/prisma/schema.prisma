generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}
model input_tag{
  id             Int      @id @default(autoincrement()) 
  tag          String?
  plate_number String?
  image_url    String?
  in_time      DateTime?
  out_time     DateTime?
  created_at   DateTime? @default(now()) 
  updated_at   DateTime? @updatedAt
  statut       Statut @default(unchecked)
  mat_checked    Boolean  @default(false)
  tag_checked    Boolean  @default(false)
}
enum Statut{
  checked
  unchecked
} 
model adonis_schema {
  id             Int      @id @default(autoincrement()) @db.UnsignedInt
  name           String?  @db.VarChar(255)
  batch          Int?
  migration_time DateTime @default(now()) @db.Timestamp(0)
}

model inputs {
  id           Int       @id @default(autoincrement()) @db.UnsignedInt
  plate_number String    @db.VarChar(254)
  in_time      DateTime  @db.DateTime(0)
  tag          String?   @db.VarChar(255)
  image        String?   @db.VarChar(254)
  created_at   DateTime? @db.DateTime(0)
  updated_at   DateTime? @db.DateTime(0)
  trucks       trucks[]
}

model notifications {
  id         Int       @id @default(autoincrement()) @db.UnsignedInt
  message    String?   @db.VarChar(1000)
  user_id    Int?      @db.UnsignedInt
  is_read    Boolean?  @default(false)
  created_at DateTime? @db.DateTime(0)@default(now()) 
  updated_at DateTime? @db.DateTime(0)@default(now()) 
  users      users?    @relation(fields: [user_id], references: [user_id], onDelete: Cascade, onUpdate: Restrict, map: "notifications_user_id_foreign")

  @@index([user_id], map: "notifications_user_id_foreign")
}

model outputs {
  id           Int             @id @default(autoincrement()) @db.UnsignedInt
  plate_number String          @db.VarChar(254)
  out_time     DateTime        @db.DateTime(0)
  status       outputs_status?
  tag          String?         @db.VarChar(255)
  created_at   DateTime?       @db.DateTime(0)
  updated_at   DateTime?       @db.DateTime(0)
  trucks       trucks[]
}

model roles {
  role_id    Int       @id @default(autoincrement()) @db.UnsignedInt
  role_name  String    @db.VarChar(80)
  created_at DateTime? @db.DateTime(0)
  updated_at DateTime? @db.DateTime(0)
  users      users[]
}

model tokens {
  id         Int       @id @default(autoincrement()) @db.UnsignedInt
  user_id    Int?      @db.UnsignedInt
  token      String    @unique(map: "tokens_token_unique") @db.VarChar(255)
  type       String    @db.VarChar(80)
  is_revoked Boolean?  @default(false)
  created_at DateTime? @db.DateTime(0)
  updated_at DateTime? @db.DateTime(0)
  users      users?    @relation(fields: [user_id], references: [user_id], onDelete: Restrict, onUpdate: Restrict, map: "tokens_user_id_foreign")

  @@index([token], map: "tokens_token_index")
  @@index([user_id], map: "tokens_user_id_foreign")
}

model trucks {
  id         Int       @id @default(autoincrement()) @db.UnsignedInt
  input_id   Int?      @db.UnsignedInt
  output_id  Int?      @db.UnsignedInt
  created_at DateTime? @db.DateTime(0)
  updated_at DateTime? @db.DateTime(0)
  inputs     inputs?   @relation(fields: [input_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "trucks_input_id_foreign")
  outputs    outputs?  @relation(fields: [output_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "trucks_output_id_foreign")

  @@index([input_id], map: "trucks_input_id_foreign")
  @@index([output_id], map: "trucks_output_id_foreign")
}

model users {
  user_id         Int             @id @default(autoincrement()) @db.UnsignedInt
  username        String          @unique(map: "users_username_unique") @db.VarChar(80)
  email           String          @unique(map: "users_email_unique") @db.VarChar(80)
  password        String          @db.VarChar(60)
  first_name      String          @db.VarChar(255)
  last_name       String          @db.VarChar(255)
  image           String          @db.VarChar(255)
  user_role_id    Int             @db.UnsignedInt
  phone           String?         @db.VarChar(255)
  recently_logged DateTime?       @db.DateTime(0)
  created_at      DateTime?       @db.DateTime(0)
  updated_at      DateTime?       @db.DateTime(0)
  notifications   notifications[]
  tokens          tokens[]
  roles           roles           @relation(fields: [user_role_id], references: [role_id], onUpdate: Restrict, map: "users_user_role_id_foreign")

  @@index([user_role_id], map: "users_user_role_id_foreign")
}

enum outputs_status {
  checked
  unchecked
}
